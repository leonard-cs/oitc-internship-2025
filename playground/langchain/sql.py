from langchain_community.utilities import SQLDatabase
from langchain_core.prompts import (
    ChatPromptTemplate,
    HumanMessagePromptTemplate,
    SystemMessagePromptTemplate,
)
from langchain_ollama import ChatOllama
from pydantic import BaseModel, Field

OLLAMA_BASE_URL = "http://localhost:11434"
OLLAMA_CHAT_MODEL = "qwen3:latest"

connection_string = (
    "mssql+pyodbc://localhost\\SQLEXPRESS/northwind"
    "?driver=ODBC+Driver+17+for+SQL+Server&Trusted_Connection=yes"
)

db = SQLDatabase.from_uri(connection_string)

# table_names = list(db.get_usable_table_names())
# ['Categories', 'CustomerCustomerDemo', 'CustomerDemographics', 'Customers', 'EmployeeTerritories', 'Employees', 'Order Details', 'Orders', 'Products', 'Region', 'Shippers', 'Suppliers', 'Territories', 'sysdiagrams']
table_names = [
    "Categories",
    "Customers",
    "EmployeeTerritories",
    "Employees",
    "Order Details",
    "Orders",
    "Products",
    "Region",
    "Shippers",
    "Suppliers",
    "Territories",
]
table_info = db.get_table_info(["Orders"])

sql_query_prompt = """
You are an AI assistant designed to interact with a SQL Server database named 'northwind'.
You have access to the following tables and their schemas:

Table info:
{table_info}

Given a user's question, generate a syntactically correct SQL query to retrieve the relevant information.
- Use **PascalCase** for all table and column names exactly as shown in table info. (e.g., OrderDate, CustomerID)
- Do NOT use snake_case or any other naming conventions.
- Limit your query to at most 5 rows unless the user specifies otherwise.
- Only query the necessary columns and tables relevant to the question.
- Do NOT perform any data modification operations (INSERT, UPDATE, DELETE, DROP).
- Double-check your query for correctness.
"""

sql_query_prompt_template = ChatPromptTemplate.from_messages(
    [
        SystemMessagePromptTemplate.from_template(sql_query_prompt),
        HumanMessagePromptTemplate.from_template("{user_question}"),
    ]
)

response_prompt = """
You are an AI assistant with access to the results of a SQL query executed against a database.

User's question:
{user_question}

SQL query results:
{query_results}

Based on the results, provide a clear, concise, and relevant answer to the user's question.
- If the results are empty or do not answer the question, say you don't know.
- Do NOT repeat the SQL query or the raw data unless necessary for clarity.
- Keep the answer brief and focused on the user's intent.
"""

response_prompt_template = ChatPromptTemplate.from_messages(
    [
        SystemMessagePromptTemplate.from_template(response_prompt),
    ]
)

ollama = ChatOllama(
    model=OLLAMA_CHAT_MODEL,
    base_url=OLLAMA_BASE_URL,
    temperature=0.0,
)


class SQLResponse(BaseModel):
    sql_query: str = Field(description="The sql query generated by the LLM.")


class FinalResponse(BaseModel):
    response: str = Field(description="The response generated by the LLM.")


def generate_and_execute_sql(user_question: str) -> str:
    sql_ollama = ollama.with_structured_output(SQLResponse)
    sql_query_pipeline = (
        {
            "user_question": lambda x: x["user_question"],
            "table_info": lambda x: x["table_info"],
        }
        | sql_query_prompt_template
        | sql_ollama
    )

    sql_response: SQLResponse = sql_query_pipeline.invoke(
        {"user_question": user_question, "table_info": table_info}
    )
    sql_query = sql_response.sql_query
    print(f"Query:\n{sql_query}")

    # try:
    #     results = db.run(sql_query)
    #     print(f"Results:\n{results}")
    # except Exception as e:
    #     return f"Error executing query: {e}"

    query_results = db.run_no_throw(sql_query)
    print(f"Query results:\n{query_results}")

    structured_ollama = ollama.with_structured_output(FinalResponse)
    response_pipeline = (
        {
            "user_question": lambda x: x["user_question"],
            "query_results": lambda x: x["query_results"],
        }
        | response_prompt_template
        | structured_ollama
    )

    response: FinalResponse = response_pipeline.invoke(
        {"user_question": user_question, "query_results": query_results}
    )
    llm_results = response.response
    print(f"llm results:\n{llm_results}")

    return f"Query:\n{sql_query}\n\nResults:\n{query_results}"


user_question = "How many orders were placed in 1996?"
answer = generate_and_execute_sql(user_question)
# print(answer)

# print(table_info)
# results = db.run("""
#                  SELECT COUNT(*) FROM orders WHERE YEAR(orderdate) = 1996;
#                  """)
# print(f"Results:\n{results}")
