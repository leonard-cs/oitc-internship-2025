from typing import Optional

from pydantic import BaseModel, Field


class ChatRequest(BaseModel):
    user_query: str
    use_query_processor: bool = False


class ChatResponse(BaseModel):
    answer: str
    semantic_query: str
    sources: list[str]
    tools_used: Optional[list[str]]


class LLMResponse(BaseModel):
    answer: str = Field(description="The final answer generated by the LLM.")
    sources: list[str] = Field(description="List of source document identifiers.")
    tools_used: list[str] = Field(
        description="List of tool names used to generate the answer."
    )
