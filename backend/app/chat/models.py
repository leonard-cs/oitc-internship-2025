from typing import Optional

from pydantic import BaseModel, Field


class ChatResponse(BaseModel):
    semantic_query: str
    answer: str
    sources: list[str]
    tools_used: Optional[list] = None


class QueryProcessorResponse(BaseModel):
    original_query: str = Field(description="The original user query")
    summary: str = Field(
        description="A concise summary of the query, capturing its essence"
    )


# SQL RAG
class RelevantTablesResponse(BaseModel):
    relevant_tables: list[str] = Field(
        description="The relevanttable names decided by the LLM."
    )


class SQLResponse(BaseModel):
    sql_query: str = Field(description="The sql query generated by the LLM.")


class FinalResponse(BaseModel):
    response: str = Field(description="The response generated by the LLM.")
